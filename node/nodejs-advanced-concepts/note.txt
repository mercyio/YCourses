nodejs internally has a collection of dependencies that it used to execute our code.

two most important dependencies are the V8 project and the lib uv project

v8 project is a open source javascript engine created by google. The purpose of this project is to be able to execute javascript code outside of the browser

lib uv project is a c++ Open source project that gives nodejs access to the operating systems and underlying file systems, it also gives access to networking and it also handles some aspects of concurrency

with javascript code we write 100% javascript
with nodejs we write 50% js and 50% c++
with v8 we write 30% js and 70% c++
with lib uv we write 100% c++

nodejs gives us a nice interface to use to relate our javascript side of our application to the actual c++ thats running on our computer to actually interpret and execute out javascript code. basically, It provides a series of wrappers and a very unified and consistent API for us to use inside our projects eg the http module, fs, path, crypto

we don't want to get access to direct c++ code but we want to use some js function and use it inside of our code. so by making use of node, we don't have to work with all the c++ that exist inside of lub uv or v8


basically, the purpose of nodejs is to give us a nice consistent API for getting access to functionality that is implemented inside  v8 and lib uv


task 1: pick a function in Node standard library
function name: pbkdf2 function: this is a name of an algorithm that is used for hashing arbitrary data. it is a function inside of node crypto library. it is usually used to hash a password for storage inside of a database

https://github.com/nodejs/node
https://github.com/nodejs/node/blob/main/lib/internal/crypto/pbkdf2.js

pbkdf2 is defined from something called process.binding. the process.binding is what connects the javascript world to the c++ world


https://github.com/nodejs/node/blob/main/src/node_crypto.cc
in the src folder where c++ is being initializes, the v8 project is used to translate the nodejs values that we place inside our different programs (like a boolean, a function or an object all translate into their c++ equivalent)

lib uv is also used inside the file as well
it is used for  a lot of concurrency and processing constructs on the c++ side


EVENT LOOP: 
event loop is used by node to handle asynchronous code that we write inside our applications. event loop is like a control structure that decides what our one thread should be doing at any given point in time. every program we run has event loop

THREADS: basically its like a little todo list that has some number of instructions that needs to be executed by the CPU. these thread is given to the cpu and then the cpu will attempt to run every instruction
threads are units of instructions that are waiting to be executed by the CPU

lib uv provides a thread pool (four threads) for very expensive function calls

Question: can we use the thread pool for jc code or can only nodejs function use it.
answer: we can write our custom JS code that uses the thread pool

Question: what function in node std library uses the thread pool
answer: all 'fs' module functions, some crypto stuff. depending on OS (windows or unix based system)

Question: how does this thread pool stuff fit into the event loop?
answer: task running in the thread pool are the 'pendingOperations' in the code example in loop.js



it is actually our operating system that does the real HTTP request. lib uv is used to issue request and then it just wait on the operating system to emit a signal. so because lib uv is delegating the work to the operating system, the operating system decides weather to make a new thread or not. it does not generally work with the four(4) thread pool that is provided by lib uv

Question: what function in node std library  the OS async features
answer: Almost everything around networking for all OS.

Question: how does this os async stuff fit into the event loop
answer: task using the 

cluster mode is used to setup multiple copies of node that are all running our server inside them

we cannot trick node into running with multiple threads but by starting up multiple copies we get multiple instances of the event loop 


CLUSTER:
the cluster manager is responsible for monitoring the health of individual instances of our applications.

when using clustering, for example if we run index.js, node is still going to boot up our application by reading the contents of that file and launching a node instance but the first instance of node that is launched is what we call the cluster manager which is automatically created for us. This cluster manager is then responsible for starting up worker instances this instances are actually responsible for processing those incoming request. To create this instances, the cluster manager is going to require the cluster module from the node standard library

isManager is always set to true